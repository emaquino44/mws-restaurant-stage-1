let restaurants,neighborhoods,cuisines,map;var markers=[];document.addEventListener("DOMContentLoaded",e=>{fetchNeighborhoods(),fetchCuisines(),toggleFilterOptions(),accessibility(),registerServiceWorker()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");t.setAttribute("tabindex",0),t.setAttribute("aria-label","Select neighborhood"),e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");t.setAttribute("tabindex",0),t.setAttribute("aria-label","Select cuisine"),e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,s=t.selectedIndex,a=e[r].value,n=t[s].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(a,n,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap(),loadImages()}),createRestaurantHTML=(e=>{const t=document.createElement("li");t.className="restaurants-list-item";const r=document.createElement("h3");r.className="restaurant-name",r.innerHTML=e.name,r.setAttribute("aria-label",`Restaurant ${e.name}`),t.append(r);const s=document.createElement("picture");s.className="restaurant-image",t.append(s);const a=document.createElement("img");a.classList.add("restaurant-img"),a.classList.add("lazy"),a.src="../img/place-holder.jpg",a.setAttribute("data-src",DBHelper.imageUrlForRestaurant(e)),a.setAttribute("alt",`Picture of ${e.name}`),s.append(a);const n=document.createElement("section");n.className="restaurant-description",n.setAttribute("aria-label",`Information about ${e.name} restaurant`),t.append(n);const o=document.createElement("p");o.className="restaurant-neighborhood",o.innerHTML=e.neighborhood,n.append(o);const i=document.createElement("p");i.className="restaurant-address",i.innerHTML=e.address,n.append(i);const l=document.createElement("a");return l.className="restaurant-details",l.setAttribute("aria-label",`View more details about ${e.name} restaurant`),l.innerHTML="View Details",l.href=DBHelper.urlForRestaurant(e),t.append(l),t}),addMarkersToMap=((e=self.restaurants)=>{e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}),toggleFilterOptions=(()=>{const e=document.querySelector(".filter-options button"),t=e.querySelector("span"),r=document.querySelector(".filter-options form");e.setAttribute("aria-label","Hide map filter options"),e.addEventListener("click",()=>{r.classList.contains("hidden")?(r.classList.remove("hidden"),t.textContent="Hide",e.setAttribute("aria-label","Hide map filter options")):(r.classList.add("hidden"),t.textContent="Show",e.setAttribute("aria-label","Show map filter options"))})}),accessibility=(()=>{document.getElementById("map").setAttribute("aria-label","Map of Neighborhoods"),document.querySelector("aside a").setAttribute("aria-label","Show filtered restaurants")}),loadImages=(()=>{let e=[].slice.call(document.querySelectorAll("img.lazy"));if("IntersectionObserver"in window){console.log("IntersectionObserver works!");let t=new IntersectionObserver((e,r)=>{e.forEach(e=>{if(e.isIntersecting){let r=e.target;r.src=r.dataset.src,r.classList.remove("lazy"),t.unobserve(r)}})});e.forEach(e=>t.observe(e))}}),registerServiceWorker=(()=>{"serviceWorker"in navigator&&navigator.serviceWorker.register("/sw.js").then(()=>{console.log("Service Worker registered.")}).catch(()=>{console.warn("Service Worker not registered")})});